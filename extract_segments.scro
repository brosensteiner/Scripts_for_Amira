# Amira-Script-Object V3.0

set moduleName [string map {"\.scro" ""} $this]

#i dont´t want name clashes with user given names for modules so here are the hopefully cryptic enough generated names for the needed but hidden modules
set surfaceGen1Name XxXYyYZzZSurfaceGen1_${moduleName}
set surfaceGen2Name XxXYyYZzZSurfaceGen2_${moduleName}
set surfaceView1Name XxXYyYZzZSurfaceView1_${moduleName}
set surfaceView2Name XxXYyYZzZSurfaceView2_${moduleName}

$this proc sayHello {} {
	global moduleName
   echo "\n************ module \"$moduleName\" loaded successfully :) ************\n"
}
$this proc say {something} {
	global moduleName
	echo "$moduleName: $something"
}

#function which creates moduleType and connects it with sourceName module and checks if connection is valid
#moduleName is the name of the module in the pool
#if moduleName module does not exist it also gets created in the pool
#function returns the name string of the newly created module
$this proc createModuleAndConnectIfOkToSource {moduleType moduleName sourceName} {

	set returnedModule ""

	if {[lsearch -exact [all $moduleType] $moduleName] == -1} {
	
		 	set returnedModule [create $moduleType $moduleName]
		 	if {[$moduleName data validSource $sourceName] == 1} {
		 		$moduleName data connect $sourceName
		 		
		 	}
		 } else {
		 	
		 	set returnedModule $moduleName
		 	if {[$moduleName data validSource $sourceName] == 1} {
		 		$moduleName data connect $sourceName
		 	}
	}
	return $returnedModule
}

#switches the given module menu port remotely from $this ($this must have a corresponding port!)
$this proc setCorrespondingPort {module menuPort {menuIndex 0}} {

	upvar #0 $module myModule
	
	$this fire
	set thisMenuIndex [$this $menuPort getValue $menuIndex]
	
	$myModule fire
	$myModule $menuPort setValue $menuIndex [string map {0 0 1 2 2 3} $thisMenuIndex] #sting map is important here, this is a buglett in Amira 5 which maps wrong numbers in SurfaceGen smoothing menu. Should be 0,1,2 - but it is 0,2,3!!!
	$myModule fire
	
}


 
$this proc constructor {} {

	$this sayHello
	
	#creates Smoothing menu port and formats it
	$this newPortMultiMenu smoothing 3
	$this smoothing setLabel "Smoothing"
	$this smoothing setLabel 0 0 "none"
	$this smoothing setLabel 0 1 "constrained smoothing"
	$this smoothing setLabel 0 2 "unconstrained smoothing"
	
	#creates the Smoothing port sliders and formats it
	$this newPortFloatSlider  SmoothingSliderPort1
	$this SmoothingSliderPort1 setLabel "SmoothingKernelSize Set 1"
	$this SmoothingSliderPort1 setMinMax 1 9
	$this SmoothingSliderPort1 setFormat "%.2g"
	$this SmoothingSliderPort1 setNumColumns 3
	$this SmoothingSliderPort1 setValue 4;#initial value for smoothing slider
	$this SmoothingSliderPort1 setTracking 1
	
	$this newPortFloatSlider  SmoothingSliderPort2
	$this SmoothingSliderPort2 setLabel "SmoothingKernelSize Set 2"
	$this SmoothingSliderPort2 setMinMax 1 9
	$this SmoothingSliderPort2 setFormat "%.2g"
	$this SmoothingSliderPort2 setNumColumns 3
	$this SmoothingSliderPort2 setValue 4;#initial value for smoothing slider
	$this SmoothingSliderPort2 setTracking 1
	
	#creates Action Button port
	$this newPortButtonList ActionButton 1
	$this ActionButton setLabel "Start calculation"
	$this ActionButton setLabel 0 "Action!!!"

	#creates new port connections that can connect to HxUniformLabelField3 data class:
	$this newPortConnection VolumeSet1PortCon HxUniformLabelField3
	$this VolumeSet1PortCon setLabel "VolumeSet 1"
	$this newPortConnection VolumeSet2PortCon HxUniformLabelField3
	$this VolumeSet2PortCon setLabel "VolumeSet 2"
	
	#creates the "None" and "All" buttons and formats them
	$this newPortButtonList SelectMatVolSet1 2
	$this SelectMatVolSet1 setLabel "Select Mat. Volume Set 1"
	$this SelectMatVolSet1 setLabel 0 "None"
	$this SelectMatVolSet1 setLabel 1 "All"
	
	$this newPortButtonList SelectMatVolSet2 2
	$this SelectMatVolSet2 setLabel "Select Mat. Volume Set 2"
	$this SelectMatVolSet2 setLabel 0 "None"
	$this SelectMatVolSet2 setLabel 1 "All"

	#$this deletePort Data #shit, can not be deleted hmm...
	
	set hideNewModules 0 

}
  
   
$this proc destructor {} {

	set hideNewModules 0
	
}

$this proc savePreparation {datadir savingFlags} {


}
  
  
$this proc compute {} {
	global moduleName surfaceGen1Name surfaceGen2Name
	global surfaceView1Name surfaceView2Name

	set myVolumeSet1Source [$this VolumeSet1PortCon source]
	set myVolumeSet2Source [$this VolumeSet2PortCon source]
	
	set myButtonNone1WasHit [$this SelectMatVolSet1 wasHit 0]
	set myButtonAll1WasHit [$this SelectMatVolSet1 wasHit 1]
	set myButtonNone2WasHit [$this SelectMatVolSet2 wasHit 0]
	set myButtonAll2WasHit [$this SelectMatVolSet2 wasHit 1]

	if {[$this VolumeSet1PortCon isNew] == 0} {
	
		$surfaceGen1Name setVar SmoothKernelSize [$this SmoothingSliderPort1 getValue];#continous update of SmoothKernelSize, which determines the "smoothness" of the generated surface
		
		if {[$this ActionButton getValue] == 0} {# start calculation when action button is pressed
			
			
			$surfaceGen1Name fire
			$surfaceGen1Name setVar SmoothKernelSize [$this SmoothingSliderPort1 getValue];#SmoothKernelSize is a internal variable which i will allow to set by user in gui
			$this setCorrespondingPort surfaceGen1Name smoothing;#sets the smoothing port for the hidden SurfaceGen module
			$surfaceGen1Name action setValue 0;#calculate the polygon surface
			
			$surfaceGen1Name fire
			
			$this createModuleAndConnectIfOkToSource HxDisplaySurface $surfaceView1Name [lindex [$surfaceGen1Name downStreamConnections] 0 0];#connect a SurfaceView module and show the result in the Viewer
			
			$surfaceGen1Name action setValue 0
			$surfaceGen1Name fire;#last but not least: don´t forget to fire :)
		}
				
	} else {
	
		if {$myVolumeSet1Source == ""} {
			$this deletePort MatVolSet1
			$this say "no module connected to VolumeSet1PortCon connection port"
		} else {
		
			$this deletePort MatVolSet1
			
			set myMaterialsList1  [$myVolumeSet1Source parameters Materials list]
			set myMaterialCount1 [llength $myMaterialsList1]
			
			$this newPortToggleList "MatVolSet1" $myMaterialCount1
			$this MatVolSet1 setLabel "Mat. Volume Set 1"
			
			for {set i 0} {$i <= [$this MatVolSet1 getNum]} {incr i} {
				$this MatVolSet1 setLabel $i [lindex $myMaterialsList1 $i]
			}
			
			
			$this createModuleAndConnectIfOkToSource HxGMC $surfaceGen1Name $myVolumeSet1Source
			
			$surfaceGen1Name fire;
			$surfaceGen1Name setVar SmoothKernelSize [$this SmoothingSliderPort1 getValue];
			$this setCorrespondingPort surfaceGen1Name smoothing;
			$surfaceGen1Name fire;
						
			$this say "Materials in volume set 1: $myMaterialCount1"
			
		}
			
	}

	if {[$this VolumeSet2PortCon isNew] == 0} {
			#nothing should happen here
	} else {
		
		if {$myVolumeSet2Source == ""} {
			$this deletePort MatVolSet2
			$this say "no module connected to VolumeSet1PortCon connection port"
		} else {
			
			$this deletePort MatVolSet2
				
			set myMaterialsList2  [$myVolumeSet2Source parameters Materials list]
			set myMaterialCount2 [llength $myMaterialsList2]
			
			$this newPortToggleList "MatVolSet2" $myMaterialCount2
			$this MatVolSet2 setLabel "Mat. Volume Set 2"
			
			for {set i 0} {$i <= [$this MatVolSet2 getNum]} {incr i} {
				$this MatVolSet2 setLabel $i [lindex $myMaterialsList2 $i]
			}
			
			$this say "Materials in volume set 2: $myMaterialCount2"
			
		}
			
	}
	
	
	
	if {$myButtonNone1WasHit == 1 && $myVolumeSet1Source != ""} {
	
		for {set i 0} {$i <= [$this MatVolSet1 getNum]} {incr i} {
			$this MatVolSet1 setValue $i 0
		}
		$this say "Button \"None\" pressed"
		
	}
	if {$myButtonAll1WasHit == 1 && $myVolumeSet1Source != ""} {
		for {set i 0} {$i <= [$this MatVolSet1 getNum]} {incr i} {
			$this MatVolSet1 setValue $i 1
		}
		$this say "Button \"All\" pressed"
	}
	
	if {$myButtonNone2WasHit == 1 && $myVolumeSet2Source != ""} {
	
		for {set i 0} {$i <= [$this MatVolSet2 getNum]} {incr i} {
			$this MatVolSet2 setValue $i 0
		}
		$this say "Button \"None\" pressed"
		
	}
	if {$myButtonAll2WasHit == 1 && $myVolumeSet2Source != ""} {
		for {set i 0} {$i <= [$this MatVolSet2 getNum]} {incr i} {
			$this MatVolSet2 setValue $i 1
		}
		$this say "Button \"All\" pressed"
	}
	
	
}
  
  