# Amira-Script-Object V3.0

#Amira version check:
set amira_version [string map { Amira "" . "" " " "" } [app version]]
if { $amira_version < 540 } then {
	theMsg warning "!!! your amira version is [app version], but you need at least 5.3 to use the complete range of functions from this module!!!"
}

source "[file dirname [info script]]/extractLabels.tcl";#relative path to extractLabels.tcl

# some packages:
# package require Tcl 8.4;# Amira 5.2.4 has Tcl 8.4 interpreter built in (patchlevel 8.4.19)
# when loading this package amira searches an annoying amount of time when first loaded to find the package (loop?). math::bigfloat is also only compatible with tcl 8.4 with a conversion hack.
package require math::bigfloat
package require math::linearalgebra
package require math::statistics
package require SharedProcs 1.0

#i´m lazy :)
namespace import -force \
						::math::linearalgebra::mkVector \
						::math::linearalgebra::crossproduct \
						::SharedProcs::*

# global variable definition (sorry no namespaces - when $this gets deleted there is a variable cleanup, \
  so this global variables will only be visible to Amira´s tcl shell as long as $this exists)
set moduleName [string map { "\.scro" "" } $this];# the name of the module generated from the script filename
set theAuthor "Bernhard Rosensteiner"

$this setVar runCounter 0
$this setVar computeCounter 0

#global axes specification for rotating objects around world center (see rotation port implementation):
set virtualEvec1					"-wx"
set virtualEvec2					"-wy"
set virtualEvec3					"-wz"

set theExtractedSurfacesList		[list];# keeps track of surfaces of the current run
set theArithmeticExtractedVoxelList	[list];# keeps track of all extracted surfaces from arithmetic runs (gets deleted every run)
set theMenuEntryInRotationPort		"all";#default is "all" for rotation port
set theResampledExtractedVoxelList	[list];# keeps track of all extracted surfaces from resample z runs
set theAdditionalDataList			[list];#keeps track of additional data that $this produces (e.g. spreadsheet objects)
set volRenList						[list];#$this maybe creats Volren modules and they will be collected in this list
set theCompleteExtractedList		[list];# keeps track of all extracted surfaces from all runs

array set userLabListSelState		{};# array for the selection state of user selected toggles
array set lastLabSetArray			{};# array of all labels in last labSet
set labCountList					[list];# count list of all lab gui toogles
set allConnectedLabFields			[list];# list of all connection ports which have a source
set labSetList						[list];# list of all lab sets which are in gui
set userResultSelState				[list]
set userSaveState					[list]
set emptyConPorts					0;# for counting empty connection ports of $this
set allEmptyConPorts				[list];# all empty connction ports of $this
set labOKFlagList					[list];# saves if labels are ok

# i dont´t want name clashes with user given names for modules
# so here are the hopefully cryptic enough names for the modules $this can create:
set surfaceGenModul XxXSurfaceGen_${moduleName}
set surfaceViewModul XxXSurfaceView_${moduleName}
set extractSurfaceModul XxXextractSurface_${moduleName}
set alignPrincipalAxesModul XxXalignPrincipalAxes_${moduleName}
set arythmeticModul XxXArithmetic_${moduleName}
set shapeAnalysisModul XxXShapeAnalysis_${moduleName}
set applyTransformModule XxXApplyTransform_${moduleName}
set obiqueSliceModule XxXOliqueSlice_${moduleName}

#
# **** the amira script object procedures ****
#
$this proc constructor {} {
	
	global theArithmeticExtractedVoxelList

	# $this setNoSave 1;# $this can now correctly be saved with the network, so no need for this ...

	$this select;# $this should be selected after loading
	$this script hide;# will be commented out when $this is finished, only handy for debbuging

	# creates options for choosing which result will be produced by $this
	$this newPortToggleList result 4
	$this result setLabel 0 "overwrite"
	$this result setLabel 1 "polygon surface"
	$this result setLabel 2 "voxel data"
	$this result setLabel 3 "resample"
	
	$this newPortFilename saveResults
	$this saveResults setLabel "Save result"
	$this saveResults setMode 3
	
	# creates a generic port for some stuff (maybe future extensions):
	$this newPortButtonList Utilities 2
	$this Utilities setLabel 0 "Connect all label fields"
	$this Utilities setCmd 0 { autoConnectToAll HxUniformLabelField3 }
	$this Utilities setLabel 1 "Apply transformation"
	$this Utilities setCmd 1 { $this applyTransformation }
	
	# creates Action Button port
	$this newPortDoIt action
	$this action setLabel "Action"
	$this action setLabel 0 "Dolt"
	$this action hide;# actually need not be visible, because apply botton does the job

	# creates smoothing options:
	$this newPortSeparator smoothingSeparator
	$this newPortMultiMenu smoothing 3
	$this smoothing setLabel 0 0 "none"
	$this smoothing setLabel 0 1 "constrained smoothing"
	$this smoothing setLabel 0 2 "unconstrained smoothing"
	
	$this newPortFloatSlider  SmoothingSliderPort
	$this SmoothingSliderPort setLabel "SmoothingKernelSize"
	$this SmoothingSliderPort setMinMax 1 9
	$this SmoothingSliderPort setFormat "%.2g"
	$this SmoothingSliderPort setNumColumns 3
	$this SmoothingSliderPort setValue 4;# initial value for smoothing slider. My tests have shown this is most of the time a good value
	$this SmoothingSliderPort setTracking 1
	
	# recreates the options port from SurfaceGen
	$this newPortToggleList options 2
	$this options setLabel 0 "add border"
	$this options setLabel 1 "compactify"
	
	# creates voxel options:
	$this newPortSeparator voxelSeparator
	$this newPortToggleList voxelOptions 3
	$this voxelOptions setLabel "Voxel options"
	$this voxelOptions setLabel 0 "align principal axis"
	$this voxelOptions setLabel 1 "use mass"
	$this voxelOptions setLabel 2 "connect results to Volren"
	#creates colormap port for the volren modules when "connect results to Volren module" is checked \
	 this port will allow remote controlling of all volren modules in the pool which $this created and connected to a extracted voxel field
	$this newPortColormap colormap
	#creates options for the alinging of the principal axes:
	$this newPortRadioBox axis1 3
	$this axis1 setLabel 0 "x"
	$this axis1 setLabel 1 "y"
	$this axis1 setLabel 2 "z"
	$this newPortRadioBox axis2 3
	$this axis2 setLabel 0 "x"
	$this axis2 setLabel 1 "y"
	$this axis2 setLabel 2 "z"
	$this axis2 setValue 1;#initial value should be on y
	#creates the rotation port options with a menu to select a extracted object or all objects:
	$this newPortButtonMenu rotation 3 1
	$this rotation setLabel 0 "Rot1"
	$this rotation setLabel 1 "Rot2"
	$this rotation setLabel 2 "Rot3"
	$this rotation setOptLabel 0 "all"
	
	# creates resample options
	$this newPortSeparator resampleSeparator
	$this newPortGeneric resampleOptions1
	$this resampleOptions1 insertIntText 0 11
	$this resampleOptions1 insertPushButton 1 "Auto Crop"
	$this resampleOptions1 setValue 0 0;#default for treshold is 0
	$this newPortButtonMenu resampleOptions2 1 1
	$this resampleOptions2 setLabel 0 "Resample!"
	$this resampleOptions2 setCmd 0 { $this reSlice theArithmeticExtractedVoxelList }
	$this resampleOptions2 setOptLabels 0 [list "Nearest Neighbor" "Standard" "Lanczos"]
	$this resampleOptions2 setOptValueString "Standard";#default value
	$this resampleOptions2 setNumOptEntries 3
		
	# when savedLabes is not defined it will with this if statement (will only be the case at first loading of $this, \
	  afterwards it is always defined -> see proc savePreparation):
	if { ![$this hasVar savedLabels] } {# hasVar is undocumented in Amira documentation, but indispensable ...
		 $this setVar savedLabels 1
	}
	# this loop creates the needed dynamic gui elements (savedLabels global variable is the counter for how many will be created):
	for { set i 1 } { $i <= [$this getVar savedLabels] } { incr i } {
		$this createConPortButtonsToggles $i
	}
	
	sayHello;# when constuctor is loaded prints welcome message in console
		
}

$this proc destructor {} {
	
	global surfaceGenModul arythmeticModul shapeAnalysisModul applyTransformModule obiqueSliceModule alignPrincipalAxesModul
	global surfaceViewModul extractSurfaceModul
	global allConnectedLabFields labCountList labOKFlagList theAdditionalDataList
	global labSetList emptyConPorts allEmptyConPorts theAuthor moduleName theArithmeticExtractedVoxelList theExtractedSurfacesList theCompleteExtractedList theResampledExtractedVoxelList volRenList
	global userLabListSelState userResultSelState userSaveState virtualEvec1 virtualEvec2 virtualEvec3 theMenuEntryInRotationPort lastLabSetArray

	# removes the modules from pool which the script eventually created:
	if { [lsearch [all] $surfaceGenModul]		!= -1 }		{ remove [$surfaceGenModul getResult]; remove $surfaceGenModul }
	if { [lsearch [all] $surfaceViewModul]		!= -1 }		{ remove $surfaceViewModul }
	if { [lsearch [all] $extractSurfaceModul]	!= -1 }		{ remove $extractSurfaceModul }
	if { [lsearch [all] $arythmeticModul]		!= -1 }		{ remove $arythmeticModul }
	if { [lsearch [all] $shapeAnalysisModul]	!= -1 }		{ remove $shapeAnalysisModul }
	if { [lsearch [all] $applyTransformModule]	!= -1 }		{ remove $applyTransformModule }
	if { [lsearch [all] $obiqueSliceModule]		!= -1 }		{ remove $obiqueSliceModule }
	
	# cleanup the global namespace (i think it´s safer to check every variable individually):
	if { [info exists surfaceGenModul] }					{ unset surfaceGenModul }
	if { [info exists surfaceViewModul] }					{ unset surfaceViewModul }
	if { [info exists shapeAnalysisModul] }					{ unset shapeAnalysisModul }
	if { [info exists applyTransformModule] }				{ unset applyTransformModule }
	if { [info exists alignPrincipalAxesModul] }			{ unset alignPrincipalAxesModul }
	if { [info exists extractSurfaceModul] }				{ unset extractSurfaceModul }
	if { [info exists obiqueSliceModule] }					{ unset obiqueSliceModule }
	if { [info exists arythmeticModul] }					{ unset arythmeticModul }
	
	if { [info exists theCompleteExtractedList] }			{ unset theCompleteExtractedList }
	if { [info exists labCountList] }						{ unset labCountList }
	if { [info exists theResampledExtractedVoxelList] }		{ unset theResampledExtractedVoxelList }
	if { [info exists theArithmeticExtractedVoxelList] }	{ unset theArithmeticExtractedVoxelList }
	if { [info exists volRenList] }							{ unset volRenList }
	if { [info exists labSetList] }							{ unset labSetList }
	if { [info exists theAdditionalDataList] }				{ unset theAdditionalDataList }
	if { [info exists theExtractedSurfacesList] }			{ unset theExtractedSurfacesList }
	if { [info exists allConnectedLabFields] }				{ unset allConnectedLabFields }
	
	if { [info exists virtualEvec1] }						{ unset virtualEvec1 }
	if { [info exists virtualEvec2] }						{ unset virtualEvec2 }
	if { [info exists virtualEvec3] }						{ unset virtualEvec3 }
	
	if { [info exists theAuthor] }							{ unset theAuthor }
	if { [info exists moduleName] }							{ unset moduleName }
	if { [info exists userSaveState] }						{ unset userSaveState }
	if { [info exists userResultSelState] }					{ unset userResultSelState }
	if { [info exists labOKFlagList] }						{ unset labOKFlagList }
	if { [info exists allEmptyConPorts] }					{ unset allEmptyConPorts }
	if { [info exists emptyConPorts] }						{ unset emptyConPorts }
	if { [info exists theMenuEntryInRotationPort] }			{ unset theMenuEntryInRotationPort }
	
	if { [array exists lastLabSetArray] }					{ array unset lastLabSetArray }
	if { [array exists userLabListSelState] }				{ array unset userLabListSelState }
}

$this proc savePreparation { args } {
	
	global allConnectedLabFields emptyConPorts
		
	# saves a counter which holds how many gui labset´s should be created after loading a network file again,
	# when $this is saved with a network file:
	$this setVar savedLabels [expr [llength $allConnectedLabFields] + $emptyConPorts]
	
}

$this proc compute {} {
	
	$this testBreak;# for safety...
	
	global moduleName theAuthor
	global surfaceViewModul extractSurfaceModul surfaceGenModul shapeAnalysisModul applyTransformModule obiqueSliceModule
	global theExtractedSurfacesList theCompleteExtractedList theArithmeticExtractedVoxelList theResampledExtractedVoxelList theAdditionalDataList volRenList
	global virtualEvec1 virtualEvec2 virtualEvec3 theMenuEntryInRotationPort
	global alignPrincipalAxesModul arythmeticModul
	global userLabListSelState userSaveState
	
	global allConnectedLabFields labCountList labOKFlagList
	global lastLabSetArray labSetList

	# some status checks on toogle bottons:
	set overwriteToggleIsChecked		[$this result getValue 0]
	set polygonSurfaceToggleIsChecked	[$this result getValue 1]
	set voxelDataToggleIsChecked		[$this result getValue 2]
	set resampleToggleIsChecked			[$this result getValue 3]
	set resultSelectionState			[$this result getState]
	
	set voxelOptionAlignPrincipalAxisIsChecked	[$this voxelOptions getValue 0]
	set voxelOptionConnectVolrenIsChecked		[$this voxelOptions getValue 2]
	
	set autoCropButtonisPressed [$this resampleOptions1 isItemNew 1];# a generic port has no option to allow setting a procedure for a button (i.e. setCmd) this means i have to do the button check manually with "if-else" statements ...
	
	$this checkModuleStateAndSetVariables;
	
	if { [$this getVar computeCounter] > 0 } then { $this conPortLogic };# procedure conPortLogic will be executed after the first compute run
	
	
	# the following if/elsif statements show/hide most of the gui when user checks the toggles or connects modules
	if { $polygonSurfaceToggleIsChecked } then {# "polygon surface" is checked
			
		$this smoothingSeparator show
		$this smoothing show
		$this SmoothingSliderPort show
		$this options show
	} else {# "polygon surface" is not checked
	
		$this smoothingSeparator hide
		$this smoothing hide
		$this SmoothingSliderPort hide
		$this options hide
	}
	if { $voxelDataToggleIsChecked } then {# "voxel data" is checked
			
		$this voxelSeparator show
		$this voxelOptions show
		if { $theArithmeticExtractedVoxelList eq [list] } then {
			$this rotation setSensitivity 0 0
			$this rotation setSensitivity 1 0
			$this rotation setSensitivity 2 0
			$this rotation setOptSensitivity 0 0
			$this rotation setOptValueString "all"
		}
		$this result setSensitivity 3 1
		
	} else {# "voxel data" is not checked
		
		$this voxelSeparator hide
		$this voxelOptions hide
		$this result setSensitivity 3 0
		$this result setValue 3 0; set resampleToggleIsChecked 0
	}
	if { $voxelOptionAlignPrincipalAxisIsChecked && $voxelDataToggleIsChecked } then {
	
		$this voxelOptions setSensitivity 1 1
		$this voxelOptions setSensitivity 2 1
		 	
		$this axis1 show 
		$this axis2 show 
		$this rotation show
		
		# logic for the axis selection:
		set axis1State [$this axis1 getState]
		if { [regexp {value\s0} $axis1State] } then {
		
			 $this axis2 setSensitivity 0 0
			 $this axis2 setSensitivity 1 1
			 $this axis2 setSensitivity 2 1
			 if { [$this axis1 isNew] } then { $this axis2 setValue 1 }
			 
		} elseif { [regexp {value\s1}  $axis1State]} {
		
			 $this axis2 setSensitivity 0 1
			 $this axis2 setSensitivity 1 0
			 $this axis2 setSensitivity 2 1
			 if { [$this axis1 isNew] } then { $this axis2 setValue 2 }
			 
		} elseif { [regexp {value\s2} $axis1State]} then {
		
			 $this axis2 setSensitivity 0 1
			 $this axis2 setSensitivity 1 1
			 $this axis2 setSensitivity 2 0
			 if { [$this axis1 isNew] } then { $this axis2 setValue 0 }
		}
		
	} else {
		
		$this voxelOptions setSensitivity 1 0
		$this voxelOptions setSensitivity 2 0
		 	
		$this axis1 hide 
		$this axis2 hide 
		$this rotation hide
	}
	if { $resampleToggleIsChecked } then {# "resample z" is checked
			
		$this resampleSeparator show
		$this resampleOptions1 show
		$this resampleOptions2 show
		
		if { $theArithmeticExtractedVoxelList eq [list] } then {
			$this resampleOptions1 setSensitivity 0 0
			$this resampleOptions1 setSensitivity 1 0
			$this resampleOptions2 setSensitivity 0 0
			$this resampleOptions2 setOptSensitivity 0 0
		}
	} else {# "resample z" is not checked
		
		$this resampleSeparator hide
		$this resampleOptions1 hide
		$this resampleOptions2 hide
	}
	if { $voxelOptionAlignPrincipalAxisIsChecked && $voxelOptionConnectVolrenIsChecked } then { $this colormap show } else { $this colormap hide }
	
	# the next "if" is neccesary because i don´t get the interactive mapping of ports in amira to work with the "connect" command (at least with colormap ports),\
	  so the eventually created volren modules get updated this way when the colormap port of $this will be modified by user:
	if { [$this colormap isNew] && [llength volRenList] != 0 } then {# when colormap port has changed and there is something in volRenList list
	
		foreach item $volRenList {
			$item color0 setState [$this colormap getState]
			$item compute
		}
	}
	
	# ********** actions ********** \
	  enters only here when "Apply" button ($this action port) of $this is pressed:
	
	if { [$this action isNew] } {# start calculation when action button is pressed
	
		workArea startWorking
	
		$this setVar runCounter [expr [$this getVar runCounter] + 1];# sets the new runCounter + 1
		say "run [$this getVar runCounter]:"
		workArea setProgressInfo "starting calculation"
		workArea setProgressValue 0.4
		
		
		# if toggle "overwrite" is set and list is not empty the next statement deletes all previously by $this generated \
		  surface- voxel- and additional-data lists: 
		if { $overwriteToggleIsChecked == 1 && $theCompleteExtractedList ne [list] } {
		
			foreach item $theCompleteExtractedList {
				say "overwrite: $item"
				remove $item
			}
			foreach addData $theAdditionalDataList {
				say "overwrite: $addData"
				remove $addData
			}
			foreach volRenModul $volRenList {
				say "overwrite: $volRenModul"
				remove $volRenModul
			}
			# delete all list elements:
			set theCompleteExtractedList [list]
			set theAdditionalDataList [list]
			set volRenList [list]
			say "all created data deleted"
			
		}
		
		if { $polygonSurfaceToggleIsChecked } {
			
			set labfieldCount 0;# counts only how often the foreach loop has run (is needed for retrieving the correct index from labSetList -> see below)
			
			foreach labelfield $allConnectedLabFields {
			
				$this testBreak
			
				createModuleAndConnectIfOkToSource HxGMC $surfaceGenModul $labelfield;# connect to labelfield
				
				$surfaceGenModul fire
				# SmoothKernelSize is a internal, but documented variable which i made visible in the gui, because it is sometimes useful for better quality of polygon surface generation
				$surfaceGenModul setVar SmoothKernelSize [$this SmoothingSliderPort getValue];
				
				# sets corresponding gui from $this for the SurfaceGen module:
				$this setCorrespondingPort surfaceGenModul options 0;
				$this setCorrespondingPort surfaceGenModul options 1;
				$this setCorrespondingPort surfaceGenModul smoothing;
								
				$surfaceGenModul action setValue 0;# calculate the polygon surface
				
				$surfaceGenModul fire
				
				# connect a SurfaceView module for selecting the user specified labels in buffer to the newly generated surface field from surfaceGenModul:
				createModuleAndConnectIfOkToSource HxDisplaySurface $surfaceViewModul [lindex [$surfaceGenModul downStreamConnections] 0 0]
						
				$surfaceViewModul compute
				$surfaceViewModul buffer setValue 2;# make shure buffer is empty for the first run (hits botton "clear")
				$surfaceViewModul compute
				
				
				set theExtractedSurfacesList [list]
				set theLabSetFromLabSetList [lindex $labSetList $labfieldCount];# the needed labSet port (e.g. labSet1, labSet2 ...)
				
				for { set i 0 } { $i < [$this $theLabSetFromLabSetList getNum] } { incr i } {
				
					$this testBreak
					
					if { [$this $theLabSetFromLabSetList getValue $i] == 1 } {
						
						set theLabel [$this $theLabSetFromLabSetList getLabel $i]
						
						$surfaceViewModul materials setValueString $theLabel
						$surfaceViewModul fire;# essential: all downStreamConnections must be updated!
						$surfaceViewModul buffer setValue 0;# add to buffer (hit add button)
						$surfaceViewModul compute
						
						# here happens the extraction of the surfaces:
						createModuleAndConnectIfOkToSource HxViewBaseExtract $extractSurfaceModul $surfaceViewModul;# createSurface command from HxDisplaySurface class\
						would also work, actually the createSurface command does the same in background but makes some overhead because of always deleting and creating\
						 a HxViewBaseExtract module for every extracted surface - createModuleAndConnectIfOkToSource does not
						$extractSurfaceModul action setValue 0
						$extractSurfaceModul fire
						
						set newExtractedSurface [[$extractSurfaceModul getResult] setLabel "$theLabel.surf"];# sets new name of the newly extracted surface (.surf is Amira standard for surface fields)
						#set newExtractedSurface [[$extractSurfaceModul getResult] getLabel];# amira gives automatic numbers to double entries in the pool so here i will get the actual label back
						
						# cleanup the label field parameters:
						array set newExtractedSurfaceParameters [$this makeArrayFromAmiraParameters $newExtractedSurface];# get the original values from the parameter list
						#echo "***[array get newExtractedSurfaceParameters]"
						
						#seemed a good idea at first to transcribe the old parameter editor values in the newly generated surface, but makes the new file corrupt without saving and is actually not neccesary, because extracted surfaces (3D-meshes) only need one patch.
						
						# clearing the old parameters:
#						clearBundle $newExtractedSurface Materials
#						eval "$newExtractedSurface parameters Materials newBundle $theLabel"
						 
						# adopting the values for the respective label:
#						foreach item { Color Transparency id } {
#							if { [info exists newExtractedSurfaceParameters(Materials,$theLabel,$item)] } {
#								eval "$newExtractedSurface parameters Materials $theLabel setValue $newExtractedSurfaceParameters(Materials,$theLabel,$item)"
#							}
#						}
						#some additional info: 	
						stampField $newExtractedSurface ModuleInfo ModuleName $moduleName author $theAuthor
						
						lappend theCompleteExtractedList $newExtractedSurface
						lappend theExtractedSurfacesList $newExtractedSurface
						
						array unset newExtractedSurfaceParameters
							
						$newExtractedSurface master disconnect;# otherwise the newly created surface gets overriden in the next for loop iteration
						$newExtractedSurface makeOnePatch;# when not made the $newExtractedSurface is corrupt when not saved and openend again,\
						(i.e attaching a SurfaceView module crashes Amira) has propably something to do with changing values in the parameter list ... 
						$newExtractedSurface fixOrientation;
						$newExtractedSurface cleanup
						$newExtractedSurface recompute
						$newExtractedSurface setDefaultFileFormat "HxSurface ascii"
						$newExtractedSurface compute
						$surfaceViewModul buffer setValue 2;# remove from buffer (hit remove button)
						$surfaceViewModul compute
						
					}
				
				}
				
				$surfaceViewModul buffer setValue 1;# only get rid of the last selection in buffer which would otherwise be visible in the viewer
				$surfaceViewModul compute
				
				# in this foreach iteration the surfaces in the theExtractedSurfacesList will be rotated according to their respective principal axes:
				foreach theSurface $theExtractedSurfacesList {
					
					createModuleAndConnectIfOkToSource HxAlignPrincipalAxes $alignPrincipalAxesModul $theSurface
					$alignPrincipalAxesModul action setValue 0
					$alignPrincipalAxesModul fire
					
				}
				
				
				remove $alignPrincipalAxesModul;# AlignPrincipalAxes module is not needed any more.
				incr labfieldCount
			}
		}
		
		if { $voxelDataToggleIsChecked } {
		
			set theArithmeticExtractedVoxelList [list]
			set labfieldCount 0;#counter for foreach loop below
			set xCount 0;#this counter will keep track of the items in $theArithmeticExtractedVoxelList when a $theItemToTransform is needed in the foreach loop below
			
			foreach labelfield $allConnectedLabFields {
				
				$this testBreak
				
				createModuleAndConnectIfOkToSource HxArithmetic $arythmeticModul [$labelfield getControllingData];# connect a Arithmetic module to the voxelfield which connects to the labelfield
				$arythmeticModul inputB connect $labelfield;# connect inputB of Arithmetic module to the labelfield
				
				set theLabSetFromLabSetList [lindex $labSetList $labfieldCount];# the needed labSet port (e.g. labSet1, labSet2 ...)
				
				for { set i 0 } {$i < [$this $theLabSetFromLabSetList getNum] } { incr i } {
			
					$this testBreak;# maybe calculation here will take long
					
					if { [$this $theLabSetFromLabSetList getValue $i] == 1 && [lindex $labOKFlagList $labfieldCount] == 1 } {# check if toogle is checked and label field is ok
					
						$arythmeticModul expr setValue "\(A*\(B==$i\)\)";# sets the extraction expression
						$arythmeticModul doIt setValue 0;# sometimes it is called "doIt", sometimes it is called "action" for running a amira module, so always look for appropriate command!
						$arythmeticModul fire
						
						set theResultFromArithmeticCalcName [[$arythmeticModul getResult] setLabel "[$labelfield parameters Materials index $i].am"];# sets label for newly created voxelfield (.am is Amira standard fileformat for data objects)
						$theResultFromArithmeticCalcName master disconnect;# disconnect, otherwise the result from arithmetic module will be overridden
						$theResultFromArithmeticCalcName setUndefinedValue 0;#shure is shure ...
						
						# some additional info (orig_labelfield/orig_bundleindex is needed in order to find shape parameters later too from the newly created voxelfield \
						  -> a labelfield is needed for ShapeAnalysis ...): 	
						stampField $theResultFromArithmeticCalcName ModuleInfo ModuleName 		$moduleName \
																					 author				$theAuthor  \
																					 orig_labelfield	$labelfield \
																					 orig_bundleindex	$i
						
						# append extracted voxel field to global list:
						lappend theCompleteExtractedList $theResultFromArithmeticCalcName
						lappend theArithmeticExtractedVoxelList $theResultFromArithmeticCalcName
					}
				}
				
				if { $voxelOptionAlignPrincipalAxisIsChecked } {
									
					for { set i 0 } {$i < [$this $theLabSetFromLabSetList getNum] } { incr i } {						
						
						if { [$this $theLabSetFromLabSetList getValue $i] == 1 && [lindex $labOKFlagList $labfieldCount] == 1} {
							
							# the shape analysis:
							array set valFromSprdsht [$this makeShapeAnalysis $labelfield $shapeAnalysisModul [$this voxelOptionMassIsChecked]]
							
							set theItemToTransform [lindex $theArithmeticExtractedVoxelList $xCount];# get the needed item from list with xCount												
							
							#all vector components (easier to read instead of getting them every time from array with lindex ...):
							set evec1x [lindex $valFromSprdsht($i,evector1) 0]
							set evec1y [lindex $valFromSprdsht($i,evector1) 1]
							set evec1z [lindex $valFromSprdsht($i,evector1) 2]
							set evec2x [lindex $valFromSprdsht($i,evector2) 0]
							set evec2y [lindex $valFromSprdsht($i,evector2) 1]
							set evec2z [lindex $valFromSprdsht($i,evector2) 2]
							# the next if checks if the coordinate system of the shape eigenvectors is right-handed. When left-handed then the system gets mirrored (evec1-evec2 plane) \
							  this check is neccesary, because the eigenvector coordinate system can be right-handed or left-handed \
							  and when not corrected for this the rotations at the origin can produce different results \
							  (consecutive rotations have different outcomes for different initial states for asymmetrical objects).
							set crPrd23 [crossproduct $valFromSprdsht($i,evector2) $valFromSprdsht($i,evector3)];#cross product of eigenvector 2 and 3
							if { 
								 [lindex $crPrd23 0] < 0 && $evec1x >= 0 || \
								 [lindex $crPrd23 0] > 0 && $evec1x < 0 \
							   } then { set valFromSprdsht($i,evector3) [eval switchNumberSigns $valFromSprdsht($i,evector3)] }
							   
							set evec3x [lindex $valFromSprdsht($i,evector3) 0]
							set evec3y [lindex $valFromSprdsht($i,evector3) 1]
							set evec3z [lindex $valFromSprdsht($i,evector3) 2]
							
							
							#angles eigenvector 1:
#							set alpha1		[expr atan2($evec1y, $evec1x)]
#							set beta1		[expr atan2($evec1z, sqrt( pow($evec1x, 2) + pow($evec1y, 2) ) )]
#							set alpha1InDeg	[expr [math::bigfloat::tostr [math::bigfloat::rad2deg [math::bigfloat::fromstr $alpha1]]]]
#							set beta1InDeg	[expr [math::bigfloat::tostr [math::bigfloat::rad2deg [math::bigfloat::fromstr $beta1]]]]
							
							#angles eigenvector 2:
#							set alpha2		[expr atan2($evec2y, $evec2x)]
							set beta2		[expr atan2($evec2z, sqrt( pow($evec2x, 2) + pow($evec2y, 2) ) )]
#							set alpha2InDeg	[expr [math::bigfloat::tostr [math::bigfloat::rad2deg [math::bigfloat::fromstr $alpha2]]]]
							set beta2InDeg	[expr [math::bigfloat::tostr [math::bigfloat::rad2deg [math::bigfloat::fromstr $beta2]]]]
							
							#angles eigenvector 3:
							set alpha3		[expr atan2($evec3y, $evec3x)]
							set beta3		[expr atan2($evec3z, sqrt( pow($evec3x, 2) + pow($evec3y, 2) ) )]
							set alpha3InDeg	[expr [math::bigfloat::tostr [math::bigfloat::rad2deg [math::bigfloat::fromstr $alpha3]]]]
							set beta3InDeg	[expr [math::bigfloat::tostr [math::bigfloat::rad2deg [math::bigfloat::fromstr $beta3]]]]
														
							set resetToWorldCoord [eval switchNumberSigns $valFromSprdsht($i,c)]
							eval "$theItemToTransform setTranslation $resetToWorldCoord";#translates center of object in 3D space to world´s origin (i.e. 0, 0, 0)
												
							#the rotations for aligning the eigenvectors to the world x, y and z axis:
							eval "$theItemToTransform rotate -wz [expr -$alpha3InDeg]"
							eval "$theItemToTransform rotate -wy [expr $beta3InDeg]"
							eval "$theItemToTransform rotate -wx [expr -$beta2InDeg]"
							# the orientation of the eigenvectors after aliging (is needed for the Rot1, Rot2 and Rot3 commands to operate on)
							set virtualEvec1 "-wz"
							set virtualEvec2 "-wy"
							set virtualEvec3 "-wx"
							
							# the rotations for aligning the eigenvectors to the user specified axes \
							  (axes specified are for the biggest and second biggest moment of inertia - \
							  works like in Amira´s AlignPrincipalAxes module) \
							  to keep track of the axis of the eigenvectors they will also be changed with every rotation
							if { [$this voxelOptionAxis1WhichIsChecked] == 0 && [$this voxelOptionAxis2WhichIsChecked] == 2 } then {
								$theItemToTransform rotate -wx 90
								set virtualEvec1 "-wy"
								set virtualEvec2 "-wz"
								set virtualEvec3 "-wx"
							}
							if { [$this voxelOptionAxis1WhichIsChecked] == 1 && [$this voxelOptionAxis2WhichIsChecked] == 0 } then {
								$theItemToTransform rotate -wz 90
								set virtualEvec1 "-wz"
								set virtualEvec2 "-wx"
								set virtualEvec3 "-wy"
							}
							if { [$this voxelOptionAxis1WhichIsChecked] == 1 && [$this voxelOptionAxis2WhichIsChecked] == 2 } then {
								$theItemToTransform rotate -wy 90
								$theItemToTransform rotate -wx 90
								set virtualEvec1 "-wx"
								set virtualEvec2 "-wz"
								set virtualEvec3 "-wy"
							}
							if { [$this voxelOptionAxis1WhichIsChecked] == 2 && [$this voxelOptionAxis2WhichIsChecked] == 0 } then {
								$theItemToTransform rotate -wy 90
								$theItemToTransform rotate -wz 90
								set virtualEvec1 "-wy"
								set virtualEvec2 "-wx"
								set virtualEvec3 "-wz"
							}
							if { [$this voxelOptionAxis1WhichIsChecked] == 2 && [$this voxelOptionAxis2WhichIsChecked] == 1 } then {
								$theItemToTransform rotate -wy 90
								set virtualEvec1 "-wx"
								set virtualEvec2 "-wy"
								set virtualEvec3 "-wz"
							}
							
							$theItemToTransform fire 
							incr xCount
						}
					}
				}
				incr labfieldCount
				
				if { $theArithmeticExtractedVoxelList ne [list] } then {#make the rotation buttons sensitiv when voxels have been extracted
				
					$this rotation setSensitivity 0 1
					$this rotation setSensitivity 1 1
					$this rotation setSensitivity 2 1
					$this rotation setOptSensitivity 0 1

					$this rotation setNumOptEntries [expr [llength $theArithmeticExtractedVoxelList] + 1];#sets the number of entries in the menu (+1 that "all" entry don´t get overwritten)
					#label for each entry:
					set count 1
					foreach item $theArithmeticExtractedVoxelList {
						$this rotation setOptLabel $count $item
						incr count
					}
					unset count
										
				} else {
				
					$this rotation setSensitivity 0 0
					$this rotation setSensitivity 1 0
					$this rotation setSensitivity 2 0
					$this rotation setOptSensitivity 0 0
					$this rotation setOptValueString "all" 
				}
			}
			
			
			if { $voxelOptionConnectVolrenIsChecked } then {
				
				foreach item $theArithmeticExtractedVoxelList {
					set aVolrenModule [create HxVolren]
					lappend volRenList $aVolrenModule
					$aVolrenModule data connect $item

					$aVolrenModule color0 allowEditing 1
					#$aVolrenModule color0 connect $this colormap;#WHY IS IT NOT POSSIBLE TO DO THIS?, ACCORDING TO AMIRA DOCU IT SHOULD!!! -> always error
					$aVolrenModule color0 setState [$this colormap getState]
						
					$aVolrenModule fire
				}
			}
			unset xCount labfieldCount
		}
		
		if { [info exists labfieldCount] } { unset labfieldCount theLabSetFromLabSetList }
		
		# user info which will be shown in the console if necessary:
		if { $allConnectedLabFields eq "" && [$this getVar runCounter] > 0 } {
			say "nothing to process - no label field connected"
		}
		if { [lrange $resultSelectionState 3 5] eq [list 0 0 0] && [$this getVar runCounter] > 0 } {
			say "nothing to process - choose on ore more result options"
		}
		foreach { key value } [array get userLabListSelState] {# searches if user has selected at least one label in the label sets
				
			regexp {(?:values\s\d)(.+)(?:isTristate)} $value myMatchedRegexp myMatchedRegexpSub
			if { ![regexp {1} $myMatchedRegexpSub] && [$this getVar runCounter] > 0 } {
				say "there are no labels selected for processing in \"[$this labSet$key getLabel]\""
			}
		
		}
		
		workArea setProgressValue 1
		workArea stopWorking
					
	}
	
	if { $resampleToggleIsChecked && $theArithmeticExtractedVoxelList ne [list] } {
		
		$this resampleOptions1 setSensitivity 0 1
		$this resampleOptions1 setSensitivity 1 1
		$this resampleOptions2 setSensitivity 0 1
		$this resampleOptions2 setOptSensitivity 0 1

		if { $autoCropButtonisPressed } then {
			
			set theTreshhold [$this resampleOptions1 getValue 0]
			foreach item $theArithmeticExtractedVoxelList {
				$this autoCrop item $theTreshhold
			}
		}
		
	} else {
		$this resampleOptions1 setSensitivity 0 0
		$this resampleOptions1 setSensitivity 1 0
		$this resampleOptions2 setSensitivity 0 0
		$this resampleOptions2 setOptSensitivity 0 0
	}
	if { $theCompleteExtractedList ne "" } then {
		
		$this Utilities setSensitivity 1 1
	} else {
	
		$this Utilities setSensitivity 1 0
	}
	
	# saving routine:		
	if { $userSaveState ne "" && $theCompleteExtractedList ne [list] } {# user has typed something in the saveResults port and theCompleteExtractedList is not empty
		
		if { [file isdirectory $userSaveState] } {
		
			foreach result $theCompleteExtractedList {
				
				switch -exact [$result getTypeId] {
					HxUniformScalarField3 { $result save "Amiramesh ascii" $userSaveState/$result }
					HxSurface { $result save "HxSurface ascii" $userSaveState/$result }
				}
			}
			foreach result $theAdditionalDataList {# saving the result from shape analysis (i.e spreadsheets)
				
				switch -exact [$result getTypeId] {
					HxSpreadSheet { $result save "CSV" $userSaveState/$result }
				}
			}
			
		} else {
			say "whatever you typed in the \"[$this saveResults getLabel]\" port ... , it is not a valid directory name, so nothing has been saved!"
		}
		
	}
	
	#assign the Rot buttons individual rotation procedures:
	if { [$this rotation getOptValue] == 0 } then {#test if menu entry in rotation port is "all"

		$this rotation setCmd 0 { rotateAll theArithmeticExtractedVoxelList virtualEvec3 }
		$this rotation setCmd 1 { rotateAll theArithmeticExtractedVoxelList virtualEvec2 }
		$this rotation setCmd 2 { rotateAll theArithmeticExtractedVoxelList virtualEvec1 }
	}
	if { [$this rotation getOptValue] != 0 } {#test if menu entry in rotation port is other than "all"
		
		set theMenuEntryInRotationPort [lindex $theArithmeticExtractedVoxelList [expr [$this rotation getOptValue] - 1]];#set the text of the menu entry - would be nice if there where an "getOptValueString" function in Amira, then this line would look like: set theMenuEntryInRotationPort [$this rotation getOptValueString]
		$this rotation setCmd 0 { rotateObject theMenuEntryInRotationPort virtualEvec3 }
		$this rotation setCmd 1 { rotateObject theMenuEntryInRotationPort virtualEvec2 }
		$this rotation setCmd 2 { rotateObject theMenuEntryInRotationPort virtualEvec1 }
	}
		
	$this setVar computeCounter [expr [$this getVar computeCounter] + 1];# computeCounter will get +1 for every run from compute proc
}
  
