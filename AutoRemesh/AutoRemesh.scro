# Amira-Script-Object V3.0

package require SharedProcs 1.0
#import of procs
source "[file dirname [info script]]/AutoRemeshProcs.tcl"

namespace import -force \
						::SharedProcs::*
						

$this setVar moduleName [moduleName]			
$this setVar theAuthor [theAuthor "Bernhard Rosensteiner"]

set theSurfaceRemesher	XxXRemeshSurface_[$this getVar moduleName]
set theRemeshedSurfacesList [list]
set allSurfacesInPoolList [all HxSurface]
						
$this proc constructor {} {

	global theSurfaceRemesher
	
	#initialise a comput proc counter:
	$this setVar computeCounter 0
	
	$this select;
	
	#save port:
	$this newPortFilename saveResults
	$this saveResults setLabel "Save result"
	$this saveResults setMode 3
	
	#filetype for saving:
	$this newPortButtonMenu filetype 1 1
	$this filetype setOptLabels 0 [list "HxSurface ascii (.surf)" \
										"HxSurface binary (.surf)" \
										"Open Inventor (.iv)" \
										"Wavefront (.obj)" \
										"ABAQUS Input (.inp)" \
										"AVS UCD ascii (.inp)" \
										"AVS UCD binary (.inp)" \
										"DXF (.dxf)" \
										"FLUENT / UNS (.cas)" \
										"FLUENT / UNS Binary (.cas)" \
										"Hypermesh ascii (.hmascii)" \
										"I-DEAS Universal File (.unv)" \
										"I-DEAS Universal File (Vektorfield) (.unv)" \
										"Matlab m-file (.m)" \
										"STL ascii (.stl)" \
										"STL binary Big Endian (.stl)" \
										"STL binary Little Endian (.stl)" \
										"Stanford PLY (.ply)" \
								  ]
	$this filetype setLabel 0 "Only convert"
	$this filetype setCmd 0 { $this convertNow }
	
	$this newPortSeparator separator
	
	#recreating the ports of the RemeshSurface module and connecting with it:
	$this newPortMultiMenu objective 2
	$this objective setLabel 0 0 "High regularity"
	$this objective setLabel 0 1 "Best isotropic vertex placement"
	
	$this newPortIntTextN triangleArea 3
	$this triangleArea setLabel 0 "nPasses"
	$this triangleArea setLabel 1 "nAreaSteps"
	$this triangleArea setLabel 2 "nEdgeFlips"
	
	$this newPortIntTextN lloydRelaxation 1
	$this lloydRelaxation setLabel 0 "nPasses"

	$this newPortIntTextN desiredSize 3
	$this desiredSize setLabel 0 "#vert."
	$this desiredSize setLabel 1 "#tris"
	$this desiredSize setLabel 2 "%"
	$this desiredSize setMinMax 2 1 100
	
	$this newPortButtonList defaults 1
	$this defaults setLabel 0 "Set"
	
	$this newPortIntTextN errorThresholds 2
	$this errorThresholds setLabel 0 "smoothness"
	$this errorThresholds setLabel 1 "distance"
	
	$this newPortFloatTextN densityContrast 1
	
	$this newPortFloatTextN densityRange 2
	$this densityRange setLabel 0 "min"
	$this densityRange setLabel 1 "max"
	
	$this newPortRadioBox interpolateOrigSurface 2
	$this interpolateOrigSurface setLabel "Interpolate orig. surface"
	$this interpolateOrigSurface setLabel 0 "smoothly"
	$this interpolateOrigSurface setLabel 1 "none"
	
	$this newPortToggleList remeshOptions1 2
	$this remeshOptions1 setLabel 0 "fix contours"
	$this remeshOptions1 setLabel 1 "contract boundary edges"

	$this newPortRadioBox remeshOptions2 2
	$this remeshOptions2 setLabel 0 "whole surface"
	$this remeshOptions2 setLabel 1 "only around corners"
	
	$this newPortToggleList surfacePathOptions 2
	$this surfacePathOptions setLabel "Surface path options"
	$this surfacePathOptions setLabel 0 "use surface paths"
	$this surfacePathOptions setLabel 1 "fix control points of surf. path"
	
	$this newPortButtonList modifyResult 1
	$this modifyResult setLabel 0 "Apply"
	
	# creates Action Button port
	$this newPortDoIt action
	$this action setLabel "Action"
	$this action setLabel 0 "Dolt"
	$this action hide;# actually need not be visible, because apply botton does the job
	
	#setting all ports to RemeshSurface module´s standard parameters:
	$this settingStandardParameter
	
	sayHello

}
		
$this proc destructor {} {

	global theSurfaceRemesher theRemeshedSurfacesList allSurfacesInPoolList
	
	#cleaning up the pool and global variables:
	if { [lsearch [all] $theSurfaceRemesher]	!= -1 }		{ remove $theSurfaceRemesher }

	if { [info exists theSurfaceRemesher] }					{ unset theSurfaceRemesher }
	if { [info exists theRemeshedSurfacesList] }			{ unset theRemeshedSurfacesList }
	if { [info exists allSurfacesInPoolList] }				{ unset allSurfacesInPoolList }

		
}

$this proc savePreparation { args } {

	global theSurfaceRemesher theRemeshedSurfacesList allSurfacesInPoolList

}
		
$this proc compute {} {

	global theSurfaceRemesher theRemeshedSurfacesList allSurfacesInPoolList
	
	set userSaveState [$this saveResults getState]
	
	$this updateModuleState;# holds all global variables, lists, arrays and so on up to date
	
	#initial connect of theSurfaceRemesher (second!!! run of compute proc)
	if { [$this getVar computeCounter] == 1 } {
	
		createModuleAndConnectIfOkToSource HxRemeshSurface $theSurfaceRemesher [$this data source];
			
		#connecting all corresponding ports with a RemeshSurface module:
		$this objective connect $theSurfaceRemesher objective
		$this triangleArea connect $theSurfaceRemesher triangleArea
		$this lloydRelaxation connect $theSurfaceRemesher lloydRelaxation
		$this desiredSize connect $theSurfaceRemesher desiredSize
		$this defaults connect $theSurfaceRemesher defaults
		$this errorThresholds connect $theSurfaceRemesher errorThresholds
		$this densityContrast connect $theSurfaceRemesher densityContrast
		$this densityRange connect $theSurfaceRemesher densityRange
		$this interpolateOrigSurface connect $theSurfaceRemesher interpolateOrigSurface
		$this remeshOptions1 connect $theSurfaceRemesher remeshOptions1
		$this remeshOptions2 connect $theSurfaceRemesher remeshOptions2
		$this surfacePathOptions connect $theSurfaceRemesher surfacePathOptions
		$this modifyResult connect $theSurfaceRemesher modifyResult
		
		#setting all ports to RemeshSurface module´s standard parameters:
		$this settingStandardParameter
	}
	
	if { [$this action isNew] } {
		$this remeshAllSurfacesPlease allSurfacesInPoolList
	}
	
	
	# saving routine:		
	if { $userSaveState ne "" && [llength $theRemeshedSurfacesList] > 0 } {# user has typed something in the saveResults port and theRemeshedSurfacesList is not empty
		$this savingRoutine $userSaveState $theRemeshedSurfacesList
	}
	
	$this setVar computeCounter [expr [$this getVar computeCounter] + 1];#increment compute counter
}
